package gov.samhsa.schemas.client;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import gov.samhsa.ds4ppilot.contract.securedorchestrator.SecuredFilterC32Service;
import gov.samhsa.ds4ppilot.contract.securedorchestrator.SecuredFilterC32ServicePortType;

import java.io.IOException;
import java.net.URL;
import java.util.Map;

import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.UnsupportedCallbackException;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import org.apache.cxf.ws.security.SecurityConstants;
import org.apache.ws.security.WSPasswordCallback;

/**
 * This class was generated by Apache CXF 2.6.0 2013-02-08T13:26:24.486-05:00
 * Generated source version: 2.6.0
 * 
 */
public final class SecuredFilterC32Client {

	public SecuredFilterC32Client() {
	}

	public static void main(String args[]) throws java.lang.Exception {
		final String endpointAddress = "";
		// final String endpointAddress = "";

		SecuredFilterC32Client client = new SecuredFilterC32Client();

		SecuredFilterC32ServicePortType port = client
				.createPort(endpointAddress);

		{
			System.out.println("Invoking registeryStoredQuery...");
			gov.samhsa.ds4ppilot.schema.securedorchestrator.RegisteryStoredQueryRequest _registeryStoredQuery_parameters = null;
			gov.samhsa.ds4ppilot.schema.securedorchestrator.RegisteryStoredQueryResponse _registeryStoredQuery__return = port
					.registeryStoredQuery(_registeryStoredQuery_parameters);
			System.out.println("registeryStoredQuery.result="
					+ _registeryStoredQuery__return);

		}
		{
			System.out.println("Invoking retrieveDocumentSet...");
			gov.samhsa.ds4ppilot.schema.securedorchestrator.RetrieveDocumentSetRequest _retrieveDocumentSet_parameters = null;
			gov.samhsa.ds4ppilot.schema.securedorchestrator.RetrieveDocumentSetResponse _retrieveDocumentSet__return = port
					.retrieveDocumentSet(_retrieveDocumentSet_parameters);
			System.out.println("retrieveDocumentSet.result="
					+ _retrieveDocumentSet__return);

		}

		System.exit(0);
	}

	private SecuredFilterC32ServicePortType createPort(String endpointAddress) {
		final URL WSDL_LOCATION = this.getClass().getClassLoader()
				.getResource("SecuredFilterC32Service.wsdl");

		final QName SERVICE = new QName(
				"http://www.samhsa.gov/ds4ppilot/contract/securedorchestrator",
				"SecuredFilterC32Service");

		SecuredFilterC32ServicePortType port = new SecuredFilterC32Service(
				WSDL_LOCATION, SERVICE).getSecuredFilterC32Port();

		BindingProvider bp = (BindingProvider) port;
		bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
				endpointAddress);

		final String privateKeyEntryAlias = "securedOrchestratorService";
		final String privateKeyEntryAliasPassword = "fei123";

		Map<String, Object> context = bp.getRequestContext();
		context.put(SecurityConstants.SIGNATURE_USERNAME, privateKeyEntryAlias);
		context.put(SecurityConstants.CALLBACK_HANDLER, new CallbackHandler() {
			@Override
			public void handle(Callback[] callbacks) throws IOException,
					UnsupportedCallbackException {
				for (int i = 0; i < callbacks.length; i++) {
					WSPasswordCallback pwcb = (WSPasswordCallback) callbacks[i];
					String id = pwcb.getIdentifier();
					if (id.equals(privateKeyEntryAlias)) {
						pwcb.setPassword(privateKeyEntryAliasPassword);
					}
				}
			}
		});
		context.put(SecurityConstants.SIGNATURE_PROPERTIES, "crypto.properties");
		context.put(SecurityConstants.SAML_CALLBACK_HANDLER,
				new SAMLCallBackHandler());

		return port;
	}

}
