package org.tempuri;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import ihe.iti.xds_b._2007.XDSRepository;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-12-04T11:19:24.315-07:00
 * Generated source version: 2.6.0
 * 
 */
@WebServiceClient(name = "DocumentRepositoryService", 
                  wsdlLocation = "classpath:XDS.b_repository.net.wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class DocumentRepositoryService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "DocumentRepositoryService");
    public final static QName XDSRepositoryHTTPEndpoint = new QName("http://tempuri.org/", "XDSRepository_HTTP_Endpoint");
    public final static QName XDSRepositoryHTTPSEndpoint = new QName("http://tempuri.org/", "XDSRepository_HTTPS_Endpoint");
    static {
        URL url = DocumentRepositoryService.class.getClassLoader().getResource("XDS.b_repository.net.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(DocumentRepositoryService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "classpath:XDS.b_repository.net.wsdl");
        }       
        WSDL_LOCATION = url;   
    }

    public DocumentRepositoryService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public DocumentRepositoryService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public DocumentRepositoryService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns XDSRepository
     */
    @WebEndpoint(name = "XDSRepository_HTTP_Endpoint")
    public XDSRepository getXDSRepositoryHTTPEndpoint() {
        return super.getPort(XDSRepositoryHTTPEndpoint, XDSRepository.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns XDSRepository
     */
    @WebEndpoint(name = "XDSRepository_HTTP_Endpoint")
    public XDSRepository getXDSRepositoryHTTPEndpoint(WebServiceFeature... features) {
        return super.getPort(XDSRepositoryHTTPEndpoint, XDSRepository.class, features);
    }
    /**
     *
     * @return
     *     returns XDSRepository
     */
    @WebEndpoint(name = "XDSRepository_HTTPS_Endpoint")
    public XDSRepository getXDSRepositoryHTTPSEndpoint() {
        return super.getPort(XDSRepositoryHTTPSEndpoint, XDSRepository.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns XDSRepository
     */
    @WebEndpoint(name = "XDSRepository_HTTPS_Endpoint")
    public XDSRepository getXDSRepositoryHTTPSEndpoint(WebServiceFeature... features) {
        return super.getPort(XDSRepositoryHTTPSEndpoint, XDSRepository.class, features);
    }

}
